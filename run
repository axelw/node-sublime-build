#! /bin/bash
# first arg	: the path to Sublime Text 2's folder Packages/User/Build
# second arg	: the name of the entry file
# third arg	; the optional debug switch

# stop running instances of node and/or node inspector
"$1/stop" "$1"

# creating new template bundle if necessary
if [[ -e "`dirname $2`/gruntfile.js" ]]; then 
	echo "running grunt with `dirname $2`/gruntfile.js"
	grunt --no-color
else
	echo "not running grunt: `dirname $2`/gruntfile.js not available"
fi

# creating one modularized JS package
if [[ -e "`dirname $2`/public/js/main.js" ]]; then 
	echo "running browserify with `dirname $2`/public/js/main.js" 
	cd "`dirname $2`/public/js" 
	browserify main.js -d -o bundle.js
else
	echo "not running browserify: `dirname $2`/public/js/main.js not available"
fi

# starting node webserver
NODE_ENV=development node $3 $2 &
pid=$!
while [[ -z "$pid" ]]; do
	sleep 1
done
echo $pid > "$1/pid.node"
echo "running node $3 ($pid)"
echo "NODE_ENV=development"

# starting node-inspector
if [[ $3 = "--debug" ]] || [[ $3 = "--debug-brk" ]]; then
	node-inspector &
	# The following works, but cannot be controlled the old way. Try figure it out later. 
	# See also: http://strongloop.com/strongblog/whats-new-in-the-node-inspector-v0-7-debugger/
	#node-debug $2 &
	pid=$!
	while [[ -z "$pid" ]]; do
		sleep 1
	done
	echo $pid > "$1/pid.inspector"
	echo "running node-inspector ($pid)"
	
	# Switch to node-inspector. 'open' is OSX only, I think. Serves me as well as the above node-debug thing
	# open -a "/Applications/Google Chrome.app" 'http://127.0.0.1:8080/debug?port=5858'
	open "http://127.0.0.1:8080/debug?port=5858"
	# give chrome some time before running ff
	sleep 1
fi

# omg, hard coded ports and the like ...
open -a "/Applications/Firefox_24.6.0.ESR.app" 'http://127.0.0.1:1337'
